Page 1 of 2
Assignment 6 (For all students. This is the final assignment in this module.) Programming II / Enterprise Java Programming, Year 2014/2015, Semester 2
? Use comments to explain your code. Missing or insufficient comments lead to marks deductions.
? If asked to write Java code, submit source code files only (filename ending .java). No need to submit .class files or the entire project directory (unless explicitly requested).
? Please create a separate file for each of your Java classes or interfaces. Indicate clearly to which question a file belongs. Put all files into a single zip-file named “Assignment6-YourName.zip” and submit via Blackboard.
? Deadline (strict): Friday, 17th April, 23:59. Late submissions will receive 0 marks!
? Please note that the graders are advised to check submissions for plagiarism!
? If you have questions about the assignment or need help with it, the best approach is to ask a tutor in one of the lab classes (you can and should visit all lab classes). Help with general Java programming problems is also provided by ComputerDISC (IT building).
? You might need to consult the Java API at http://docs.oracle.com/javase/7/docs/api/
Suppose you want to create a software which needs to process text files which contain the details of a number of people (records of persons). More precisely, this type of file is specified as follows:
- The record of a person is represented as a line of text of the following form: Forename,Surname,Street,HouseNumber,City,EmailAddress
- A file consists of an arbitrary number (but at least one) of such records/lines.
- Each of the six attributes (forename, surname, etc.) can contain any characters except commas and line breaks. Each attribute contains at least one character which isn’t a whitespace.
Example: Aileen,Brady,Dublin Road,53,Cork,aileen39@yahoo.com
Jim,Hardiman,Patrick Street,1,Galway City,jimh@gmail.com
Colm,McRae,Orchard Road,61,Dublin,cmcrae@gmail.com
(Remark: This is an instance of a widespread file format called headerless CSV. CSV stands for “Comma-Separated Values” and “headerless” means there is no extra line with column names at the beginning.)
Q1. Create a program with a class PersonsManager whose main-method accepts the name of a file as argument. The file is supposed to contain persons’ records as specified above, but it also might contain errors, see below. The contents of the file should be read and stored in a list in memory (choose an appropriate data type), such that each person record in the file becomes an element in the list. Use an appropriate class PersonRecord with fields for forename, surname, street, etc, for the objects in the list. Make class PersonRecord an inner class within class PersonsManager. Finally, your program should print all list elements. However, the file might not be fully compliant with the specification above – it might be empty, or there might be empty attributes (as, e.g., in “Sam,, ,66,Hamburg,sam.spoon@yahoo.com”), or empty lines... Provide appropriate error handling and error messages in these cases (you can ignore other kinds of syntax errors). Ideally, your program should try to retrieve as much of the file contents as possible if the file contains such errors (and store it in the list) instead of simply stopping at an error. [40 marks]
Page 2 of 2
Q2. Extend your program for Q1 so that it opens a window which contains a JTable component with six columns (with column headers “Forename”, “Surname”, “Street”, etc). The table should show the contents of the persons’ records read from the file (that is, each row should show the details of a person, see example below). The table should have a vertical scroll bar attached (at this, it is ok if the scroll bar only appears if there are enough rows - that’s Swing’s default behavior). [40 marks]
Q3. Extend your program for Q2 with a Swing menu bar with a single menu “File” with a single menu item “Open”. Selecting this menu item should open a file chooser dialog box (hint: class JFileChooser) where the user can select an existing file. After the user has selected a file, the existing JTable on the screen should be updated so that it shows the persons’ records in the selected file. In case of problems (empty or erroneous file contents, see Q1), the respective error messages should appear as pop-up dialog boxes (hint: JOptionPane). [20 marks]